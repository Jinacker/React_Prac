// 배열 메서드 1. 요소 조작

// 6가지의 요소 조작 메서드

// 1. push
// 배열의 맨 뒤에 새로운 요소를 추가하는 메서드
let arr1 = [1,2,3];
arr1.push(4); 
arr1.push(4,5,6);
const newLen = arr1.push(7,8); // push 메서드는 => 변환된 배열의 길이 반환

// 2. pop
// 맨 뒤에 있는 요소 제거 => 반환까지

let arr2 = [1,2,3];
const popped = arr2.pop(); // popped에 제거된놈 들어감

// 3. shift 메서드
// 배열의 맨 앞 요소를 제거하고 반환
const shifted = arr2.shift();

// 4. unshift
// 배열의 맨 앞에 새로운 요소를 추가하는 메서드
let arr4 = [1,2,3];
const newLen2 = arr1.unshift(0); // 맨 앞에 0 추가되고 변환된 길이를 반환

/////////// => shift와 unshift는 자료구조상 문제로 성능이 안좋음 => 되도록 안쓰는게 좋다...

// 5. slice
// 마치 가위처럼, 배열의 특정 범위를 잘라내서 새로운 배열로 반환

let arr5 = [1,2,3,4,5];
arr5.slice(2,5); // 첫번째 인수: 잘라내기 시작 인덱스 / 두번째 인수: 잘라내기 끝 인덱스, 꼭 + 1 해줄것.
// 두번째 인수 생략시 그냥 끝까지 잘라냄.
// 근데 이렇게 잘라내도 원본 값은 안바뀜.
// 암튼 위에꺼 출력하면 3,4,5 출력됨.
arr5.slice(-3); // => 이렇게하면 뒤에서부터 잘라내기 가능.

// 6. concat 
// 두개의 서로 다른 배열을 이어붙여서 새로운 배열 반환

let arr6 = [1,2];
let arr7 = [3,4];

arr6.concat(arr7);
// 이러면 합쳐져서 1 2 3 4 됨

